{"version":3,"sources":["src/views/UserForm.ts","src/index.ts"],"names":[],"mappings":";;;;;ACAA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAEA,IAAM,QAAQ,GAAG,IAAI,UAAA,CAAA,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAE9D,QAAQ,CAAC,MAAM,CAAA,CAAE;;;;;;;;;;;;IDJJ,QAAQ;EACnB,SAAA,SAAoB,MAAe,EAAA;IAAA,eAAA,OAAA,QAAA;IAAf,IAAA,CAAA,MAAM,GAAN,MAAM;EAAY;EAAC,YAAA,CAAA,QAAA;IAAA,GAAA;IAAA,KAAA,EAEvC,SAAA,UAAA,EAAS;MACP,OAAO;QACL,cAAc,EAAE,IAAI,CAAC,aAAa;QAClC,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC;;OAEpC;IACH;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,cAAA,EAAa;MACX,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC;IACrC;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,cAAA,EAAa;MACX,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;IACxC;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,SAAA,EAAQ;MACN;IAOF;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,WAAW,QAA0B,EAAA;MACnC;MACA,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAA,CAAE;MAClC;MACA,IAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;MACxC;MACA,SAAA,EAAA,MAAA,UAAA,GAAuB,SAAS,EAAA,EAAA,GAAA,UAAA,CAAA,MAAA,EAAA,EAAA,IAAE;QAA7B,IAAM,QAAQ,GAAA,UAAA,CAAA,EAAA;QACjB;QACA,IAAA,eAAA,GAA8B,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;UAAA,gBAAA,GAAA,cAAA,CAAA,eAAA;UAA1C,SAAS,GAAA,gBAAA;UAAE,QAAQ,GAAA,gBAAA;QAC1B;QACA,IAAM,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC;QACpD;QAAA,IAAA,SAAA,GAAA,0BAAA,CACsB,QAAQ;UAAA,KAAA;QAAA;UAA9B,KAAA,SAAA,CAAA,CAAA,MAAA,KAAA,GAAA,SAAA,CAAA,CAAA,IAAA,IAAA,GAAgC;YAAA,IAArB,OAAO,GAAA,KAAA,CAAA,KAAA;YAChB;YACA,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;;QACzD,SAAA,GAAA;UAAA,SAAA,CAAA,CAAA,CAAA,GAAA;QAAA;UAAA,SAAA,CAAA,CAAA;QAAA;;IAEL;EAAC;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,OAAA,EAAM;MACJ;MACA,IAAM,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC;MAC1D;MACA,eAAe,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAA,CAAE;MAE3C,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC;MAExC;MACA,IAAM,aAAa,GAAG,eAAe,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC;MACrE;MACA,aAAa,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC;MAE3D;MACA,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC;IAC7C;EAAC;EAAA,OAAA,QAAA;AAAA;AA/DH,OAAA,CAAA,QAAA,GAAA,QAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["export class UserForm {\r\n  constructor(private parent: Element) {}\r\n\r\n  eventsMap(): { [key: string]: () => void } {\r\n    return {\r\n      'click:button': this.onButtonClick,\r\n      'mouseover:h1': this.onHeaderHover /*\r\n      'drag:div': this.onDragDiv, */,\r\n    };\r\n  }\r\n\r\n  onButtonClick(): void {\r\n    console.log('first button clicked');\r\n  }\r\n\r\n  onHeaderHover(): void {\r\n    console.log('hovered over the header');\r\n  }\r\n\r\n  template(): string {\r\n    return `\r\n      <div>\r\n        <h1>UserForm</h1>\r\n        <input type=\"text\" name=\"name\" />\r\n        <button>Click Me!</button>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  bindEvents(fragment: DocumentFragment): void {\r\n    // get the event map\r\n    const eventsMap = this.eventsMap();\r\n    // get the event keys\r\n    const eventKeys = Object.keys(eventsMap);\r\n    // loop over the event keys\r\n    for (const eventKey of eventKeys) {\r\n      // split the event key into the event type and the event name\r\n      const [eventName, selector] = eventKey.split(':');\r\n      // get the elements that match the event name\r\n      const elements = fragment.querySelectorAll(selector);\r\n      // loop over the elements\r\n      for (const element of elements) {\r\n        // add the event listener\r\n        element.addEventListener(eventName, eventsMap[eventKey]);\r\n      }\r\n    }\r\n  }\r\n\r\n  render(): void {\r\n    // create a template element from the template string\r\n    const templateElement = document.createElement('template');\r\n    // set the innerHTML to the template string\r\n    templateElement.innerHTML = this.template();\r\n\r\n    this.bindEvents(templateElement.content);\r\n\r\n    // get the button element\r\n    const buttonElement = templateElement.content.querySelector('button');\r\n    // add an event listener to the button\r\n    buttonElement.addEventListener('click', this.onButtonClick);\r\n\r\n    // with append the template will no longer hold the content, counter to appendChild\r\n    this.parent.append(templateElement.content);\r\n  }\r\n}\r\n","import { UserForm } from './views/UserForm';\r\n\r\nconst userForm = new UserForm(document.querySelector('#root'));\r\n\r\nuserForm.render();\r\n"]}